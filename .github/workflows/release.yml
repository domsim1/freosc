name: Build and Release FreOSC VST

on:
  push:
    tags:
      - 'v*.*.*'  # Triggers on version tags like v1.0.0, v1.2.3, etc.

permissions:
  contents: write  # Required for creating releases and uploading assets
  actions: read    # Required for downloading artifacts
  packages: read   # Required for caching

jobs:
  build:
    name: Build VST (${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    timeout-minutes: 60
    strategy:
      matrix:
        os: [windows-latest, macos-latest]
        include:
          - os: windows-latest
            artifact_name: FreOSC-Windows
            vst_path: build/FreOSC-VST_artefacts/Release/VST3/FreOSC.vst3
            standalone_path: build/FreOSC-VST_artefacts/Release/Standalone/FreOSC.exe
          - os: macos-latest
            artifact_name: FreOSC-macOS
            vst_path: build/FreOSC-VST_artefacts/Release/VST3/FreOSC.vst3
            au_path: build/FreOSC-VST_artefacts/Release/AU/FreOSC.component
            standalone_path: build/FreOSC-VST_artefacts/Release/Standalone/FreOSC.app

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Get version from tag
        id: version
        shell: bash
        run: |
          VERSION=${GITHUB_REF#refs/tags/v}
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "tag=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

      # Windows-specific setup
      - name: Setup MSVC (Windows)
        if: matrix.os == 'windows-latest'
        uses: microsoft/setup-msbuild@v2
        
      - name: Verify Windows build environment
        if: matrix.os == 'windows-latest'
        shell: cmd
        run: |
          echo "Checking Visual Studio installation..."
          where msbuild
          msbuild -version
          echo "Checking CMake..."
          where cmake
          cmake --version

      # macOS-specific setup
      - name: Setup Xcode (macOS)
        if: matrix.os == 'macos-latest'
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: latest-stable

      # Setup JUCE for both platforms
      - name: Cache JUCE
        id: cache-juce
        uses: actions/cache@v4
        with:
          path: JUCE
          key: juce-8.0.4-${{ runner.os }}

      - name: Setup JUCE
        shell: bash
        run: |
          if [ "${{ steps.cache-juce.outputs.cache-hit }}" == "true" ]; then
            echo "Using cached JUCE installation"
            if [ ! -f "JUCE/CMakeLists.txt" ]; then
              echo "Error: Cached JUCE is corrupted - CMakeLists.txt not found"
              rm -rf JUCE
              echo "Removed corrupted cache, will download fresh JUCE"
            else
              echo "Cached JUCE is valid"
              echo "JUCE directory contents:"
              ls -la JUCE/ | head -5
              exit 0
            fi
          fi
          
          # Download and setup JUCE (only if not cached or cache was corrupted)
          echo "Setting up fresh JUCE installation..."
          
          # Clean up any existing directories
          rm -rf JUCE JUCE-8.0.4 juce.zip
          
          if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
            echo "Downloading JUCE for Windows..."
            curl -L -o juce.zip "https://github.com/juce-framework/JUCE/releases/download/8.0.4/juce-8.0.4-windows.zip"
          else
            echo "Downloading JUCE for macOS..."
            curl -L -o juce.zip "https://github.com/juce-framework/JUCE/releases/download/8.0.4/juce-8.0.4-osx.zip"
          fi
          
          # Check zip file exists and is valid
          echo "Checking zip file..."
          if [ ! -f "juce.zip" ]; then
            echo "Error: JUCE zip file not downloaded"
            exit 1
          fi
          echo "JUCE zip file downloaded successfully"
          
          # Extract to a temporary directory first to avoid conflicts
          mkdir -p temp_juce
          cd temp_juce
          unzip -o -q ../juce.zip
          
          # Debug: Check what was extracted in temp directory
          echo "Contents in temp directory:"
          ls -la
          
          if [ -d "JUCE" ]; then
            # Windows zip extracts directly as JUCE folder
            cd ..
            mv temp_juce/JUCE ./JUCE
            rm -rf temp_juce
            echo "Successfully extracted JUCE directory"
          elif [ -d "JUCE-8.0.4" ]; then
            # macOS zip extracts as JUCE-8.0.4 folder
            cd ..
            mv temp_juce/JUCE-8.0.4 JUCE
            rm -rf temp_juce
            echo "Successfully extracted and renamed JUCE"
          else
            echo "Error: Neither JUCE nor JUCE-8.0.4 directory found after extraction"
            echo "Available directories in temp_juce:"
            ls -la
            cd ..
            rm -rf temp_juce
            exit 1
          fi
          
          # Cleanup zip file
          rm -f juce.zip
          
          # Verify JUCE installation
          if [ ! -f "JUCE/CMakeLists.txt" ]; then
            echo "Error: JUCE installation failed - CMakeLists.txt not found"
            echo "JUCE directory contents:"
            ls -la JUCE/ | head -10
            exit 1
          fi
          
          echo "JUCE successfully installed at: $(pwd)/JUCE"

      # Configure and build
      - name: Configure CMake
        shell: bash
        timeout-minutes: 15
        run: |
          cd FreOSC-VST
          mkdir -p build
          cd build
          
          # Debug: Check JUCE directory exists
          echo "Checking JUCE directory..."
          ls -la ../../JUCE/ | head -5
          
          # Set JUCE path relative to workflow working directory
          JUCE_PATH="$(pwd)/../../JUCE"
          echo "JUCE path will be: $JUCE_PATH"
          ls -la "$JUCE_PATH" | head -3
          
          if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
            echo "Configuring CMake for Windows..."
            cmake .. -DJUCE_DIR="$JUCE_PATH" -G "Visual Studio 17 2022" -A x64 -DCMAKE_BUILD_TYPE=Release
          else
            echo "Configuring CMake for macOS..."
            # Speed up cmake configuration by skipping some checks
            # Use older deployment target to avoid deprecated API issues
            cmake .. -DJUCE_DIR="$JUCE_PATH" \
              -DCMAKE_BUILD_TYPE=Release \
              -DCMAKE_OSX_DEPLOYMENT_TARGET=11.0 \
              -DCMAKE_OSX_ARCHITECTURES="x86_64;arm64"
          fi
          
          echo "CMake configuration completed successfully"

      - name: Build VST
        shell: bash
        timeout-minutes: 30
        run: |
          cd FreOSC-VST/build
          echo "Starting build process..."
          
          if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
            echo "Building for Windows..."
            cmake --build . --config Release --parallel 2 --verbose
          else
            echo "Building for macOS..."
            cmake --build . --config Release --parallel 2 --verbose
          fi
          
          echo "Build completed successfully"

      # Package artifacts
      - name: Package Windows artifacts
        if: matrix.os == 'windows-latest'
        shell: bash
        run: |
          cd FreOSC-VST
          mkdir -p artifacts
          # Copy VST3
          cp -r "${{ matrix.vst_path }}" artifacts/
          # Copy Standalone
          cp "${{ matrix.standalone_path }}" artifacts/
          # Create info file
          echo "FreOSC VST3 Synthesizer v${{ steps.version.outputs.version }}" > artifacts/README.txt
          echo "Windows 64-bit Release" >> artifacts/README.txt
          echo "" >> artifacts/README.txt
          echo "Contents:" >> artifacts/README.txt
          echo "- FreOSC.vst3 - VST3 plugin for DAWs" >> artifacts/README.txt
          echo "- FreOSC.exe - Standalone synthesizer application" >> artifacts/README.txt
          echo "" >> artifacts/README.txt
          echo "Installation:" >> artifacts/README.txt
          echo "Copy FreOSC.vst3 to your VST3 plugins folder" >> artifacts/README.txt
          echo "Run FreOSC.exe directly for standalone use" >> artifacts/README.txt

      - name: Package macOS artifacts
        if: matrix.os == 'macos-latest'
        shell: bash
        run: |
          cd FreOSC-VST
          mkdir -p artifacts
          # Copy VST3
          cp -r "${{ matrix.vst_path }}" artifacts/
          # Copy AU (if exists)
          if [ -d "${{ matrix.au_path }}" ]; then
            cp -r "${{ matrix.au_path }}" artifacts/
          fi
          # Copy Standalone
          cp -r "${{ matrix.standalone_path }}" artifacts/
          # Create info file
          echo "FreOSC VST3 Synthesizer v${{ steps.version.outputs.version }}" > artifacts/README.txt
          echo "macOS Release (Universal Binary)" >> artifacts/README.txt
          echo "" >> artifacts/README.txt
          echo "Contents:" >> artifacts/README.txt
          echo "- FreOSC.vst3 - VST3 plugin for DAWs" >> artifacts/README.txt
          if [ -d "${{ matrix.au_path }}" ]; then
            echo "- FreOSC.component - Audio Unit plugin" >> artifacts/README.txt
          fi
          echo "- FreOSC.app - Standalone synthesizer application" >> artifacts/README.txt
          echo "" >> artifacts/README.txt
          echo "Installation:" >> artifacts/README.txt
          echo "VST3: Copy FreOSC.vst3 to ~/Library/Audio/Plug-Ins/VST3/" >> artifacts/README.txt
          if [ -d "${{ matrix.au_path }}" ]; then
            echo "AU: Copy FreOSC.component to ~/Library/Audio/Plug-Ins/Components/" >> artifacts/README.txt
          fi
          echo "Standalone: Copy FreOSC.app to /Applications/ or run directly" >> artifacts/README.txt

      # Create ZIP archives
      - name: Create ZIP archive
        shell: bash
        run: |
          cd FreOSC-VST/artifacts
          if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
            7z a "${{ matrix.artifact_name }}-${{ steps.version.outputs.tag }}.zip" *
          else
            zip -r "${{ matrix.artifact_name }}-${{ steps.version.outputs.tag }}.zip" *
          fi

      # Upload artifacts for release
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.artifact_name }}-${{ steps.version.outputs.tag }}
          path: FreOSC-VST/artifacts/${{ matrix.artifact_name }}-${{ steps.version.outputs.tag }}.zip

  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get version from tag
        id: version
        run: |
          VERSION=${GITHUB_REF#refs/tags/v}
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "tag=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: release-assets

      - name: Generate release notes
        id: release_notes
        run: |
          # Get previous tag
          PREV_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
          
          if [ -n "$PREV_TAG" ]; then
            echo "## What's Changed" > release_notes.md
            echo "" >> release_notes.md
            git log --pretty=format:"- %s" $PREV_TAG..HEAD >> release_notes.md
            echo "" >> release_notes.md
          else
            echo "## FreOSC VST3 Synthesizer" > release_notes.md
            echo "" >> release_notes.md
            echo "Initial release of FreOSC VST3 synthesizer plugin." >> release_notes.md
            echo "" >> release_notes.md
          fi
          
          echo "" >> release_notes.md
          echo "## Downloads" >> release_notes.md
          echo "" >> release_notes.md
          echo "- **FreOSC-Windows-${{ steps.version.outputs.tag }}.zip** - Windows VST3 + Standalone" >> release_notes.md
          echo "- **FreOSC-macOS-${{ steps.version.outputs.tag }}.zip** - macOS VST3 + AU + Standalone" >> release_notes.md
          echo "" >> release_notes.md
          echo "## Installation" >> release_notes.md
          echo "" >> release_notes.md
          echo "### Windows" >> release_notes.md
          echo "1. Extract the ZIP file" >> release_notes.md
          echo "2. Copy FreOSC.vst3 to your VST3 plugins folder" >> release_notes.md
          echo "3. Run FreOSC.exe for standalone use" >> release_notes.md
          echo "" >> release_notes.md
          echo "### macOS" >> release_notes.md
          echo "1. Extract the ZIP file" >> release_notes.md
          echo "2. Copy FreOSC.vst3 to ~/Library/Audio/Plug-Ins/VST3/" >> release_notes.md
          echo "3. Copy FreOSC.component to ~/Library/Audio/Plug-Ins/Components/ (AU)" >> release_notes.md
          echo "4. Copy FreOSC.app to /Applications/ for standalone use" >> release_notes.md
          echo "" >> release_notes.md
          echo "## System Requirements" >> release_notes.md
          echo "" >> release_notes.md
          echo "- **Windows**: Windows 10 or later (64-bit)" >> release_notes.md
          echo "- **macOS**: macOS 10.13 or later (Intel/Apple Silicon)" >> release_notes.md
          echo "- **RAM**: 4GB minimum, 8GB recommended" >> release_notes.md
          echo "- **Compatible DAWs**: Any VST3 or AU compatible host" >> release_notes.md

      - name: Create Release with Assets
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Create the release with GitHub CLI
          gh release create "${{ steps.version.outputs.tag }}" \
            --title "FreOSC v${{ steps.version.outputs.version }}" \
            --notes-file release_notes.md \
            --repo "${{ github.repository }}" \
            "release-assets/FreOSC-Windows-${{ steps.version.outputs.tag }}/FreOSC-Windows-${{ steps.version.outputs.tag }}.zip#FreOSC-Windows-${{ steps.version.outputs.tag }}.zip" \
            "release-assets/FreOSC-macOS-${{ steps.version.outputs.tag }}/FreOSC-macOS-${{ steps.version.outputs.tag }}.zip#FreOSC-macOS-${{ steps.version.outputs.tag }}.zip"

      - name: Release Summary
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "🎉 Successfully created release: FreOSC v${{ steps.version.outputs.version }}"
          RELEASE_URL=$(gh release view "${{ steps.version.outputs.tag }}" --repo "${{ github.repository }}" --json url --jq .url)
          echo "📦 Release URL: $RELEASE_URL"
          echo ""
          echo "Assets uploaded:"
          echo "- FreOSC-Windows-${{ steps.version.outputs.tag }}.zip"
          echo "- FreOSC-macOS-${{ steps.version.outputs.tag }}.zip"